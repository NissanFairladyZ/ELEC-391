// -------------------------------------------------------------
// 
// File Name: C:\Users\bryan\Downloads\viterbi\gm_hdlcoder_commviterbi\TracebackUnit.v
// Created: 2024-06-16 16:50:07
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: TracebackUnit
// Source Path: gm_hdlcoder_commviterbi/Viterbi Decoder Subsystem/Viterbi Decoder1/Traceback/TracebackUnit
// Hierarchy Level: 3
// Model version: 10.10
// 
// Traceback Decoding Unit
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module TracebackUnit
          (clk,
           reset,
           enb,
           dec_in_0,
           dec_in_1,
           dec_in_2,
           dec_in_3,
           idx_in,
           dec_out_0,
           dec_out_1,
           dec_out_2,
           dec_out_3,
           idx_out);


  input   clk;
  input   reset;
  input   enb;
  input   dec_in_0;  // ufix1
  input   dec_in_1;  // ufix1
  input   dec_in_2;  // ufix1
  input   dec_in_3;  // ufix1
  input   [1:0] idx_in;  // ufix2
  output  dec_out_0;  // ufix1
  output  dec_out_1;  // ufix1
  output  dec_out_2;  // ufix1
  output  dec_out_3;  // ufix1
  output  [1:0] idx_out;  // ufix2


  wire [3:0] dec_in;  // ufix1 [4]
  reg  [3:0] dec_out;  // ufix1 [4]
  wire slicedidx;  // ufix1
  wire thread;  // ufix1


  assign dec_in[0] = dec_in_0;
  assign dec_in[1] = dec_in_1;
  assign dec_in[2] = dec_in_2;
  assign dec_in[3] = dec_in_3;

  always @(posedge clk or posedge reset)
    begin : decshiftRegister_process
      if (reset == 1'b1) begin
        dec_out <= {4{1'b0}};
      end
      else begin
        if (enb) begin
          dec_out <= dec_in;
        end
      end
    end



  assign dec_out_0 = dec_out[0];

  assign dec_out_1 = dec_out[1];

  assign dec_out_2 = dec_out[2];

  assign dec_out_3 = dec_out[3];

  assign slicedidx = idx_in[0];



  // Decode the previous state based on current state and the decision branch
  assign thread = (idx_in == 2'b00 ? dec_in[0] :
              (idx_in == 2'b01 ? dec_in[1] :
              (idx_in == 2'b10 ? dec_in[2] :
              dec_in[3])));



  assign idx_out = {slicedidx, thread};



endmodule  // TracebackUnit

