// -------------------------------------------------------------
// 
// File Name: C:\Users\bryan\Downloads\viterbi\gm_hdlcoder_commviterbi\Viterbi_Decoder_Subsystem_tb.v
// Created: 2024-06-16 16:50:47
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Viterbi_Decoder_Subsystem_tb
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Viterbi_Decoder_Subsystem_tb;



  reg  clk;
  reg  reset;
  wire clk_enable;
  wire Out_done;  // ufix1
  wire rdEnb;
  wire Out_done_enb;  // ufix1
  reg [12:0] Out_addr;  // ufix13
  wire Out_active;  // ufix1
  reg [12:0] Bernoulli_Binary_Generator_out1_addr;  // ufix13
  wire Bernoulli_Binary_Generator_out1_active;  // ufix1
  reg  tb_enb_delay;
  wire Bernoulli_Binary_Generator_out1_enb;  // ufix1
  wire [12:0] Bernoulli_Binary_Generator_out1_addr_delay_1;  // ufix13
  reg signed [31:0] fp_In;  // sfix32
  reg  rawData_In;
  reg signed [31:0] status_In;  // sfix32
  reg  holdData_In;
  reg  In_offset;
  wire In;
  reg  check1_done;  // ufix1
  wire snkDonen;
  wire resetn;
  wire tb_enb;
  wire ce_out;
  wire Out;
  wire Out_enb;  // ufix1
  wire Out_lastAddr;  // ufix1
  wire [12:0] Out_addr_delay_1;  // ufix13
  reg signed [31:0] fp_Out_expected;  // sfix32
  reg  Out_expected;
  reg signed [31:0] status_Out_expected;  // sfix32
  wire Out_ref;
  reg  Out_testFailure;  // ufix1
  wire testFailure;  // ufix1


  assign Out_done_enb = Out_done & rdEnb;



  assign Out_active = Out_addr != 13'b1001110001000;



  assign Bernoulli_Binary_Generator_out1_active = Bernoulli_Binary_Generator_out1_addr != 13'b1001110001000;



  assign Bernoulli_Binary_Generator_out1_enb = Bernoulli_Binary_Generator_out1_active & (rdEnb & tb_enb_delay);



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 5000
  always @(posedge clk or posedge reset)
    begin : BernoulliBinaryGenerator_process
      if (reset == 1'b1) begin
        Bernoulli_Binary_Generator_out1_addr <= 13'b0000000000000;
      end
      else begin
        if (Bernoulli_Binary_Generator_out1_enb) begin
          if (Bernoulli_Binary_Generator_out1_addr >= 13'b1001110001000) begin
            Bernoulli_Binary_Generator_out1_addr <= 13'b0000000000000;
          end
          else begin
            Bernoulli_Binary_Generator_out1_addr <= Bernoulli_Binary_Generator_out1_addr + 13'b0000000000001;
          end
        end
      end
    end



  assign #1 Bernoulli_Binary_Generator_out1_addr_delay_1 = Bernoulli_Binary_Generator_out1_addr;

  // Data source for In
  initial
    begin : In_fileread
      fp_In = $fopen("In.dat", "r");
      status_In = $rewind(fp_In);
    end

  always @(Bernoulli_Binary_Generator_out1_addr_delay_1, rdEnb, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        rawData_In <= 1'bx;
      end
      else if (rdEnb == 1) begin
        status_In = $fscanf(fp_In, "%h", rawData_In);
      end
    end

  // holdData reg for Bernoulli_Binary_Generator_out1
  always @(posedge clk or posedge reset)
    begin : stimuli_Bernoulli_Binary_Generator_out1
      if (reset) begin
        holdData_In <= 1'bx;
      end
      else begin
        holdData_In <= rawData_In;
      end
    end

  always @(rawData_In or rdEnb)
    begin : stimuli_Bernoulli_Binary_Generator_out1_1
      if (rdEnb == 1'b0) begin
        In_offset <= holdData_In;
      end
      else begin
        In_offset <= rawData_In;
      end
    end

  assign #2 In = In_offset;

  assign snkDonen =  ~ check1_done;



  assign resetn =  ~ reset;



  assign tb_enb = resetn & snkDonen;



  // Delay inside enable generation: register depth 1
  always @(posedge clk or posedge reset)
    begin : u_enable_delay
      if (reset) begin
        tb_enb_delay <= 0;
      end
      else begin
        tb_enb_delay <= tb_enb;
      end
    end

  assign rdEnb = (check1_done == 1'b0 ? tb_enb_delay :
              1'b0);



  assign #2 clk_enable = rdEnb;

  initial
    begin : reset_gen
      reset <= 1'b1;
      # (20);
      @ (posedge clk)
      # (2);
      reset <= 1'b0;
    end

  always 
    begin : clk_gen
      clk <= 1'b1;
      # (5);
      clk <= 1'b0;
      # (5);
      if (check1_done == 1'b1) begin
        clk <= 1'b1;
        # (5);
        clk <= 1'b0;
        # (5);
        $stop;
      end
    end

  Viterbi_Decoder_Subsystem u_Viterbi_Decoder_Subsystem (.clk(clk),
                                                         .reset(reset),
                                                         .clk_enable(clk_enable),
                                                         .In(In),
                                                         .ce_out(ce_out),
                                                         .Out(Out)
                                                         );

  assign Out_enb = ce_out & Out_active;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 5000
  always @(posedge clk or posedge reset)
    begin : c_2_process
      if (reset == 1'b1) begin
        Out_addr <= 13'b0000000000000;
      end
      else begin
        if (Out_enb) begin
          if (Out_addr >= 13'b1001110001000) begin
            Out_addr <= 13'b0000000000000;
          end
          else begin
            Out_addr <= Out_addr + 13'b0000000000001;
          end
        end
      end
    end



  assign Out_lastAddr = Out_addr >= 13'b1001110001000;



  assign Out_done = Out_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_1
      if (reset) begin
        check1_done <= 0;
      end
      else begin
        if (Out_done_enb) begin
          check1_done <= Out_done;
        end
      end
    end

  assign #1 Out_addr_delay_1 = Out_addr;

  // Data source for Out_expected
  initial
    begin : Out_expected_fileread
      fp_Out_expected = $fopen("Out_expected.dat", "r");
      status_Out_expected = $rewind(fp_Out_expected);
    end

  always @(Out_addr_delay_1, ce_out, tb_enb_delay)
    begin
      if (tb_enb_delay == 0) begin
        Out_expected <= 1'bx;
      end
      else if (ce_out == 1) begin
        status_Out_expected = $fscanf(fp_Out_expected, "%h", Out_expected);
      end
    end

  assign Out_ref = Out_expected;

  always @(posedge clk or posedge reset)
    begin : Out_checker
      if (reset == 1'b1) begin
        Out_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && Out !== Out_ref) begin
          Out_testFailure <= 1'b1;
          $display("ERROR in Out at time %t : Expected '%h' Actual '%h'", $time, Out_ref, Out);
        end
      end
    end

  assign testFailure = Out_testFailure;

  always @(posedge clk)
    begin : completed_msg
      if (check1_done == 1'b1) begin
        if (testFailure == 1'b0) begin
          $display("**************TEST COMPLETED (PASSED)**************");
        end
        else begin
          $display("**************TEST COMPLETED (FAILED)**************");
        end
      end
    end

endmodule  // Viterbi_Decoder_Subsystem_tb

